Profile Evaluation and University Matching
"Generate a module that accepts student profile data (GPA, test scores, extracurricular activities, preferences, budget) through a user input form. Implement a multi-modal classification model to compute a profile strength score (0-100). Use a hybrid recommendation system combining collaborative and content-based filtering to recommend 5-10 universities, including program details, costs, and admission requirements. Rank results by match likelihood. Provide a mock template with a static sample output (e.g., GPA: 3.8, Test Score: 100, Budget: $30,000/year → Strength Score: 85, Matches: [University A, University B]). When AI-enabled is toggled, generate dynamic, personalized university matches based on input. Include error handling for invalid or missing inputs (e.g., non-numeric GPA, negative budget). Return results in JSON format for API compatibility. Ensure the module is lightweight and executable in a cloud-based environment."



Document Preparation and Improvement
"Develop a module that accepts user-uploaded application documents (CV, personal statement, research proposal) as text or PDF input. Implement a transformer-based NLP model to analyze document content and a generative AI model to suggest improvements, including rephrasing, structural changes, and keyword enhancements. Provide a mock template with a static sample output (e.g., Input: 'I am passionate about AI' → Suggestions: 'Rephrase: I am deeply committed to advancing AI through innovative research', 'Add: Include a specific AI project'). When AI-enabled is toggled, generate real-time improvement suggestions based on the uploaded document. Include error handling for unsupported file formats (e.g., images) and invalid inputs. Return suggestions in a clean, editable text format within a JSON structure. Ensure compatibility with a cloud-based runtime environment."



Research and Professor Matching
"Create a module that accepts student research interests (e.g., 'machine learning, NLP') as text input. Implement semantic similarity and topic modeling to match interests with professor profiles, including name, specialization, and university. Use a generative AI model to enhance research proposals based on matched interests. Provide a mock template with a static sample output (e.g., Interest: 'NLP' → Matches: [Prof. Smith, Prof. Jones], Proposal Enhancement: 'Add recent NLP trends'). When AI-enabled is toggled, generate dynamic professor matches and proposal enhancements based on input. Include error handling for vague or empty inputs (e.g., 'none'). Return results in JSON format, ensuring professor matches are ranked by relevance. Design the module for efficient execution in a cloud-based environment."



Visa and Immigration Support
"Build a module that accepts student details (nationality, program, destination country) and uploaded documents (e.g., passport, financial proof) via a form. Implement a rule-based system with machine learning components to analyze visa requirements and a computer vision/NLP hybrid model to verify document validity. Include a conversational AI component for visa interview preparation, providing sample questions and tips. Provide a mock template with a static sample output (e.g., Nationality: India, Program: MS, Country: USA → Visa: F-1, Document Status: Valid, Interview Tips: ['Practice study plan questions']). When AI-enabled is toggled, generate dynamic visa requirements, document verification, and interview preparation based on input. Include error handling for missing data or invalid documents. Return results in JSON format. Ensure the module runs efficiently in a cloud-based environment."



Cultural Adaptation and Integration
"Develop a module that accepts student origin and destination countries as input via a form. Implement a knowledge graph with neural network components to provide personalized cultural adaptation tips and a graph-based recommendation system to match students with relevant communities (e.g., student organizations). Provide a mock template with a static sample output (e.g., Origin: Nigeria, Destination: Canada → Tips: ['Purchase winter clothing', 'Understand academic norms'], Communities: ['Nigerian Students Association']). When AI-enabled is toggled, generate dynamic cultural tips and community matches based on input. Include error handling for invalid country inputs (e.g., unrecognized country names). Return results in JSON format, ensuring tips are practical and communities are ranked by relevance. Design for execution in a cloud-based environment."



Career Development and Post-Graduation
"Create a module that accepts student profile data (e.g., major, skills) and career goals via a form. Implement a hybrid recommendation system with predictive components to suggest career paths and match students with job opportunities. Use a rule-based system to provide post-graduation immigration guidance (e.g., work visa options). Provide a mock template with a static sample output (e.g., Profile: CS Graduate, Goal: Software Engineer → Career Paths: ['Software Engineer', 'Data Scientist'], Job Matches: ['Google', 'Microsoft'], Immigration: 'Eligible for OPT'). When AI-enabled is toggled, generate dynamic career path suggestions, job matches, and immigration advice based on input. Include error handling for incomplete profiles or unrealistic goals. Return results in JSON format, with job matches ranked by suitability. Ensure the module is optimized for a cloud-based runtime environment."