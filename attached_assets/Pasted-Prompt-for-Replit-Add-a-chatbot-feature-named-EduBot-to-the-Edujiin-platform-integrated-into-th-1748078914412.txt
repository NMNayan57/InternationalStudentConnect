Prompt for Replit:

Add a chatbot feature named "EduBot" to the Edujiin platform, integrated into the 'Welcome & Account Hub' page and accessible across all pages. EduBot will be an AI-powered assistant providing real-time, context-aware support to international students, using the DeepSeek R1 model via OpenRouter API. Follow these specifications:

Key Objectives:

Provide personalized, conversational support across all Edujiin features (University Matching, Professor Search, Document Drafting, Job Finding, Scholarship Finder, Cultural Support, On-Campus Support, Post-Graduation Guidance, Family Support, Research Collaboration, Holistic Profile Evaluation, Mental Health Resources).
Ensure a user-friendly, accessible interface with high readability, styled using Tailwind CSS and shadcn/ui components.
Integrate with existing features and user profile data for context-aware responses.
Chatbot Functionality:

Accessibility and Entry Points:
Add a floating chat icon (bottom-right corner) on all pages, styled in Deep Blue (#1E3A8A) with a white chat icon. On click, open a chat window.
Ensure the “AI Chatbot” button in the dashboard (WelcomePage.tsx) opens the same chat window.
Chat Window Design:
Use a Deep Blue (#1E3A8A) header for the chat window with white text (“EduBot - Your Study Abroad Guide”).
Chat background in White/Off-White (#F9FAFB), user messages in Medium Teal (#2DD4BF), and EduBot responses in Light Minty Green (#A7F3D0).
Input field with a Lighter Medium Blue (#60A5FA) border, and a “Send” button in Deep Blue (#1E3A8A) with a Medium Teal (#2DD4BF) hover state.
Add quick reply buttons (e.g., “Yes, show more” or “No, try again”) in Medium Teal (#2DD4BF).
Greeting and Interaction:
On opening, EduBot greets: “Hi [Name]! I’m EduBot, your guide for studying abroad. How can I help you today?” (Retrieve [Name] from PostgreSQL user profile).
Display pre-defined prompts: “Find a university,” “Help with visa application,” “Find a scholarship,” “Cultural tips,” “Mental health support.”
Response Mechanism:
Use DeepSeek R1 via OpenRouter API to generate responses, integrating with user profile data (e.g., study level, country of origin, destination country, subscription plan) stored in PostgreSQL.
Integrate with existing features to provide actionable insights:
University Matching: “I found three universities in Canada for your computer science major…” (Pull from University Matching module).
Professor Search: “Here are professors in AI at [university]…” (Pull from Professor Search module).
Document Drafting: “Here’s a draft SOP for your application…” (Use Content Generation Agent).
Job Finding: “I found five jobs in London matching your skills…” (Pull from Job Finding module).
Scholarship Finder: “Here are new scholarships for you…” (Pull from Scholarship Finder module).
Cultural Support: “Moving to the UK? Here are cultural tips…” (Pull from Cultural Support module).
Mental Health: “Feeling stressed? Try our relaxation exercises…” (Link to Mental Health Resources).
Maintain context across conversations (e.g., if a user asks about visas and then SOPs, connect the queries).
Proactively suggest actions: “You’re in the Pre-Departure stage—would you like cultural tips for [destination country]?”
Technical Implementation:
Deploy EduBot as a microservice using Kubernetes on AWS, ensuring it can handle 200+ concurrent users.
Store chat history in PostgreSQL (new table: chat_history with columns user_id, message, response, timestamp).
Use the Conversational Agent (DeepSeek R1) as the core, integrating with the Recommendation Agent (for matching tasks) and Content Generation Agent (for document drafting).
Add a feedback mechanism: After each response, ask, “Was this helpful? (Yes/No)” and store feedback in PostgreSQL (feedback table with columns user_id, response_id, rating).
Additional Features:
Support multilingual responses (e.g., English, Mandarin, Hindi) using a translation API if needed.
For Premium users, send proactive push notifications (e.g., “Your scholarship deadline is tomorrow!”).
Ensure responsiveness (desktop, tablet, mobile) and dark/light mode support using shadcn/ui components.
Design and Styling:

Use the Edujiin color palette: Deep Blue (#1E3A8A), Medium Teal (#2DD4BF), Light Minty Green (#A7F3D0), Lighter Medium Blue (#60A5FA), White/Off-White (#F9FAFB), Dark Gray (#1F2937).
Add subtle swirl and dot decorations (inspired by the Edujiin logo) in the chat window header (Lighter Medium Blue swirls, Medium Teal dots).
Ensure high contrast for accessibility (e.g., white text on Deep Blue, Dark Gray on White/Off-White).
Testing:

Test EduBot for context retention, response accuracy, and integration with all features.
Verify scalability (200+ concurrent users) and responsiveness across devices.
Ensure accessibility (e.g., using a contrast checker tool).